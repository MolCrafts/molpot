from .utils import SingletonCLI
import typer
from pathlib import Path
from typing_extensions import Annotated
from .config import ConfigCLI
import molpot as mpot
import json


configs = ConfigCLI().configs

app_cli = typer.Typer()


def inspect_app_script(script_path: Path):
    apps = {}
    try:
        import importlib

        spec = importlib.util.spec_from_file_location(script_path.name, script_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)

        import inspect

        for class_name, app in inspect.getmembers(module):
            if (
                inspect.isclass(app)
                and issubclass(app, mpot.app.MolpotApp)
                and app.__name__ != "MolpotApp"
            ):
                apps[class_name] = app

    except Exception as e:
        typer.echo(f"Failed to import the script: {e}", err=True)

    return apps


class AppCLI(SingletonCLI):

    def __init__(self):
        super().__init__()

        self.app_dir = self.init_dir()
        self.app_config = self.load_config()
        self.apps = self.import_apps()

        self.cli.command()(self.install)
        self.cli.command()(self.uninstall)

    def init_dir(self):
        app_dir = Path(configs["app_dir"])
        if not app_dir.exists():
            app_dir.mkdir(parents=True)
            with open(app_dir / "__init__.py", "w") as f:
                f.write(f"# This file is generated by molpot")
        self.app_config_path = app_dir / ".app.json"
        if not self.app_config_path.exists():
            with open(self.app_config_path, "w") as f:
                json.dump({}, f)
        return app_dir

    def load_config(self) -> dict:
        if not (self.app_config_path).exists():
            self.init_dir()
        with open(self.app_config_path, "r") as f:
            config = json.load(f)
        return config

    def import_apps(self) -> dict:
        """
        import all the apps from the app directory

        Returns:
            dict: dictionary of all the apps
        """
        apps = {}
        for script in self.app_config.keys():
            app = inspect_app_script(self.app_dir / script)
            apps.update(app)

        for app in apps.values():
            self.cli.add_typer(app().cli, name=app.name)

        return apps

    def install(
        self,
        script: Annotated[Path, typer.Argument(help="Path to the script")],
        editable: Annotated[bool, typer.Option("--editable", "-e")] = False,
    ):
        """Install a script to the molpot app directory"""

        installed_script_path = self.app_dir / script.name

        if editable:
            (installed_script_path).symlink_to(script.absolute())
        else:
            import shutil

            shutil.copy(script, installed_script_path)

        app = inspect_app_script(installed_script_path)

        for class_name, app in app.items():

            script_config = self.app_config.setdefault(str(script), {})
            script_config[class_name] = {
                "name": app.name,
                "version": app.version,
            }

        with open(self.app_config_path, "w") as f:
            json.dump(self.app_config, f)

    def uninstall(
        self, script: Annotated[Path, typer.Argument(help="Path to the script")]
    ):
        """Uninstall a script from the molpot app directory"""

        installed_script_path = self.app_dir / script.name

        if installed_script_path.exists():
            installed_script_path.unlink()
            del self.app_config[script]
            with open(self.app_config_path, "w") as f:
                json.dump(self.app_config, f)
        else:
            typer.echo("Script not found", err=True)
